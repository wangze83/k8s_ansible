---
- hosts: "{{ group }}"
  serial: 5
  vars:
    disk_model: none
    # docker
    old_docker_rpm: docker-ce-17.03.2.ce-1.el7.centos.x86_64.rpm
    old_docker_selinux_rpm: docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch.rpm
    docker_rpm: docker-ce-18.06.1.ce-3.el7.x86_64.rpm
    docker_selinux_rpm: container-selinux-2.68-1.el7.noarch.rpm
  tasks:
    ## 1. 确定磁盘类型
    #- name: Storage partition md127
    #  set_fact:
    #    disk_model: md127
    #  when:
    #    - ansible_devices['md127'] is defined
    #    - ansible_devices['sda'] is defined
    #    - ansible_devices['sdb'] is defined
    #    - ansible_devices['sdc'] is defined
    #    - ansible_devices['sdd'] is defined
    #    - ansible_devices['sde'] is defined
    #    - ansible_devices['sdf'] is defined
    #- name: Storage partition md125
    #  set_fact:
    #    disk_model: md125
    #  when:
    #    - ansible_devices['sda'] is defined
    #    - ansible_devices['sdb'] is defined
    #    - ansible_devices['sdc'] is defined
    #    - ansible_devices['sdf'] is defined
    #    - ansible_devices['sdg'] is defined
    #    - ansible_devices['sdh'] is defined

    #- name: Storage partition docker11
    #  set_fact:
    #    disk_model: docker11
    #  when:
    #    - ansible_devices['sda'] is defined
    #    - ansible_devices['sdb'] is not defined

    #- name: Storage partition memdiska
    #  set_fact:
    #    disk_model: memdiska
    #  when:
    #    - ansible_devices['sda'] is defined
    #    - ansible_devices['memdiska'] is defined
    #    - ansible_devices['sdb'] is not defined

    #- name: Storage partition nvme0n1
    #  set_fact:
    #    disk_model: nvme0n1
    #  when:
    #    - ansible_devices['sda'] is defined
    #    - ansible_devices['nvme0n1'] is defined
    #    - ansible_devices['sdb'] is not defined

#   #     - (ansible_devices['sda']['size'] == "1.09 TB") or (ansible_devices['sda']['size']== "1.63 TB")
    #- name: 'Check parm valid'
    #  fail: msg="Storage partition is not valid {{disk_model}}"
    #  when: disk_model == "none"
    ## 2. kubectl drain, 驱逐 Node 已有 Pod
    - include_tasks: "../kubectl/drain.yml"

    ## 3. storage 执行相应的磁盘分区
    #- service: name=docker state=stopped
    #- include_tasks: "../storage-overlayfs/md127.yml"
    #  when: disk_model == "md127"
    #- include_tasks: "../storage-overlayfs/docker_11_17.yml"
    #  when: disk_model == "docker11"
    #- include_tasks: "../storage-overlayfs/memdisk.yml"
    #  when: disk_model == "memdiska"
    #- include_tasks: "../storage-overlayfs/nvme.yml"
    #  when: disk_model == "nvme0n1"
    #- include_tasks: "../storage-overlayfs/md125.yml"
    #  when: disk_model == "md125"
    ## 4. 安装 docker
    - include_tasks: "../docker-overlayfs.yml"
    ## 5. 启动 kubelet
    - service: name=kubelet state=started
    - service: name=kube-proxy state=started

    ## kubectl uncordon, Node 恢复可调度
    - include_tasks: "../kubectl/uncordon.yml"
  become: yes
  gather_facts: true
